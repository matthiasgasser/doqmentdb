{
  "name": "doqmentdb",
  "description": "A Promise-Based DocumentDB ODM Client for NodeJS",
  "version": "0.2.4",
  "filename": "index.js",
  "main": "index.js",
  "homepage": "https://github.com/a8m/doqmentdb",
  "author": {
    "name": "Ariel Mashraki",
    "email": "ariel@mashraki.co.il"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/a8m/doqmentdb.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "keywords": [
    "documentDB",
    "doqmentDB",
    "odm"
  ],
  "dependencies": {
    "bluebird": "^2.3.11",
    "documentdb": "^0.9.2"
  },
  "devDependencies": {
    "agile": "0.0.2",
    "istanbul": "^0.3.2",
    "mocha": "^1.21.5",
    "should": "^4.1.0",
    "sinon": "^1.10.3"
  },
  "scripts": {
    "test": "istanbul cover ./node_modules/mocha/bin/_mocha -- -u exports test/spec/**/*"
  },
  "license": "MIT",
  "readme": "##DoQmentDB - A Promise-Based DocumentDB Client \n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n> DoQmentDB is a tiny layer that provides the simplicity of MongoDB for DocumentDB users(with schema, hooks/middleware).\n\n##Table of contents:\n- [Get Started](#get-started)\n- [Database](#database)\n  - [create](#create)\n  - [insert](#create)\n  - [getDatabase](#getdatabase)\n  - [find](#find)\n  - [findById](#findbyid)\n  - [findOrCreate](#findorcreate)\n  - [remove](#remove)\n  - [use](#use)\n- [Collection](#collection)\n  - [create](#create-1)\n  - [insert](#create-1)\n  - [getCollection](#getcollection)\n  - [find](#find-1)\n  - [findOne](#findone)\n  - [findById](#findbyid-1)\n  - [findAndRemove](#findandremove)\n  - [findOneAndRemove](#findoneandremove)\n  - [findAndModify](#findandmodify)\n  - [findOneAndModify](#findoneandmodify)\n  - [findOrCreate](#findorcreate-1)\n  - [update](#findandmodify)\n- [Queries](#queries)\n- [Operations](#operations)\n- [Schema](#schema)\n- [Middleware](#middleware)\n  - [pre](#pre)\n  - [post](#post)\n\n#Get Started\n**(1)** You can install **DoQmentDB** using 2 different methods:  \n- clone & [build](#developing) this repository\n- via **[npm](https://www.npmjs.org/)**: by running `$ npm install doqmentdb` from your terminal\n\n**(2)** Add to your project:  \n```js\nvar DoqmentDB = require('doqmentdb');\n```\n**(3)** Start Playing with DoqmentDB:\n```js\nvar DoQmentDB  = require('doqmentdb');\n// Create DocumentDB connection\nvar connection = new (require('documentdb').DocumentClient)(HOST, OPTIONS);\n// Pass connection and database-name, if `test` is not exist it will create one.\nvar db = new DoQmentDB(connection, 'test');\n// Create a CollectionManager instance, if `users` is not exist it will create one.\nvar users = db.use('users');\n// Using schema\nusers.schema(model);\n// Add hooks(see `users` full example)\nusers.pre('save', function(next) {\n  var doc = this;\n  doc.createdAt = new Date().toString();\n  next();\n});\n\n// Each http function returns a `Promise` with two specific methods: success and error.\nusers.create({ name: '6534' })\n  .then(console.log);\n  \nusers.findById(1)\n  .then(console.log);\n\nusers.findAndRemove({ isAdmin: false })\n  .then(console.log);\n```\n#Database\nCreate a DatabaseManager by passing `connection` and `databaseName`.\n```js\nvar DoQmentDB  = require('doqmentdb');\n// Create DocumentDB connection\nvar connection = new (require('documentdb').DocumentClient)(HOST, OPTIONS);\n// if `test` is not exist it will create one\nvar db = new DoQmentDB(connection, 'test');\n```\n##create\nGet name and crete new collection in the used db.  \n**Usage:** `db.create(string)`  \n**Aliases:** `insert`  \n**Returns:** `Object`\n```js\ndb.create('users')\n  .then(console.log);\n```\n##getDatabase\nReturn the used database.  \n**Usage:** `db.getDatabase()`\n```js\ndb.getDatabase()\n  .then(console.log);\n```\n##find\nfind collection by given object params.  \n**Note:** to return all documents, omit params argument or pass an empty object({}).  \n**Usage:** `db.find(object[optional])`  \n**Returns:** `Array`\n```js\ndb.find()\n  .then(console.log); // Return all collections\n  \ndb.find({ id: 'users' })\n  .then(console.log); // Return collections where id equal to `users`\n```\n##findById\nfind collection by given `string` id.  \n**Usage:** `db.findById(string)`  \n**Returns:** `Object`\n```js\ndb.findById('users')\n  .then(console.log);\n```\n##findOrCreate\nget object properties, search for collection, if it not exist create one.  \n**Usage:** `db.findOrCreate(object)`  \n**Returns:** `Object`\n```js\ndb.findOrCreate({ name: 'users', id: '#1' })\n  .then(console.log);\n```\n##remove\nget collection id as a `String`, if it exist - remove it and return `undefined`, else return `false`.  \n**Usage:** `db.remove(string)`  \n**Returns:** `undefined` or `Boolean`\n```js\ndb.remove('test')\n  .then(console.log);\n```\n##use\nget collection name and return `CollectionManager` instance.  \n**Note:** if the given `collection` is not exist it will create one.  \n**Usage:** `var coll = db.use(string);`  \n**Returns:** `object` instanceof `CollectionManager`\n```js\nvar users = db.use('users'); // This operation is not async\n```\n#Collection\nCreate a CollectionManager by passing to `.use` function a collection name.\n```js\nvar users = db.use('users'); \nconsole.log(users.constructor.name); // Collection\n```\n##create\nget object properties, and create new document under the used collection.  \n**Usage:** `users.create(object)`  \n**Aliases:** `insert`  \n**Returns:** `Object`\n```js\nusers.create({ name: 'Ariel', admin: true })\n  .then(console.log); // { name: 'Ariel', admin: true, id: '8...31', _self: ... }\n```\n##getCollection\nreturn the used collection.  \n**Usage:** `users.getCollection()`\n```js\nusers.getCollection()\n  .then(console.log);\n```\n##find\nget object properties and return array of results.  \n**Usage:** `users.find(object)`  \n**Note:** to return all collections, omit params argument or pass an empty object({}).  \n**Returns:** `Array`\n```js\nusers.find({ active: true })\n  .then(console.log);\n```\n##findOne\nget object properties and return the first matching result.  \n**Usage:** `users.findOne(object)`  \n**Returns:** `Object`\n```js\nusers.findOne({ active: true, name: 'Bar' })\n  .then(console.log);\n```\n##findById\nfind document by giving a `string` id.  \n**Usage:** `users.findById(string)`  \n**Returns:** `Object`\n```js\nusers.findById('53...3')\n  .then(console.log);\n```\n##findAndRemove\nget object properties to search, find the equivalents and remove them.  \n**Usage:** `users.findAndRemove(object)`  \n**Returns:** `Array`\n```js\nusers.findAndRemove({ name: 'Ariel' })\n  .then(console.log);\n\n// Remove all users\nusers.findAndRemove({})\n  .then(console.log);\n```\n##findOneAndRemove\nget object properties, and remove the first matching result.  \n**Usage:** `users.findOneAndRemove(object)`  \n**Returns:** `undefined` or `Boolean`\n```js\nusers.findOneAndRemove({ name: 'Ariel', admin: true })\n  .then(console.log);\n```\n##findAndModify\nget object properties to search, find the equivalents and modify them(`extend` operation).  \n**Usage:** `users.findAndModify(object, extend)`  \n**Aliases:** `update`  \n**Returns:** `Array`\n```js\nusers.update({ name: 'Ariel', admin: true }, { admin: false })\n  .then(console.log);\n```\n##findOneAndModify\nget object properties and modify(`extend` operation) the first matching.  \n**Usage:** `users.findOneAndModify(object, extend)`  \n**Returns:** `Object`\n```js\nusers.findOneAndModify({ admin: false }, { admin: true })\n  .then(console.log);\n```\n##findOrCreate\nget object properties, search for document, if it not exist create one.  \n**Usage:** `users.findOrCreate(object)`    \n**Returns:** `Object`\n```js\nusers.findOrCreate({ admin: false, name: 'Ariel' })\n  .then(console.log);\n```\n\n#Queries\n###Operators\n* Logical & Conjunctive: \n  * `$or` OR\n  * `$and` AND\n  * `$not` NOT\n  * `$nor` NOT(... OR ...)\n* Comparison: \n  * `$gt` >\n  * `$gte` >=\n  * `$lt` <\n  * `$lte` <=\n  * `$ne` <> or !=\n* UDF:\n  * `$in` like `Array.prototype.some(...)`\n  * `$all` like `Array.prototype.every(...)`\n  * `$type` `typeof value`\n  * `$regex` `new RegExp(...).test(value)`\n  * `$size` test `array.length`\n\n###Examples\n```js\nusers.find({ a: 1, b: 2, c: '3' })\n// ... r WHERE r.a=1 AND r.b=2 AND r.c=\"3\"\n\nusers.find({ $or: [{ a: 2, b: 3}, { c: 3 }] })\n// ... r WHERE ((r.a=2 AND r.b=3) OR r.c=3)\n\nusers.find({ $not: { a: 1, b: 2, c: 3 } })\n// ... r WHERE NOT(r.a=1 AND r.b=2 AND r.c=3)\n\nusers.find({ $nor: [ { a: 1 }, { b: 3 }]})\n// ... r WHERE NOT(r.a=1 OR r.b=3)\n\nusers.find({ $nor: [ { a: 1, b: 1 }, { c: 3 } ] })\n// ... r WHERE NOT((r.a=1 AND r.b=1) OR r.c=3)\n\nusers.find({ $not: { name: { $gt: 3 }, age: 12 } })\n// ... r WHERE NOT(r.name > 3 AND r.age=12)\n\nusers.find({ $not: { name: { $ne: 'bar' } } })\n// ... r WHERE NOT(r.name <> \"bar\")\n\nusers.find({ $or: [\n        { name: { $ne: 'Ariel' } },\n        { age: { $lte: 26 } },\n        { $and: [\n          { isAdmin: { $ne: false } },\n          { isUser: { $ne: false } }\n        ]}\n      ]})\n// ... r WHERE r.name <> \"Ariel\" OR r.age <= 26 OR (r.isAdmin <> false AND r.isUser <> false)\n\nusers.find({ coins: { $in: 2 } })\n// ... r WHERE inUDF(r.coins, 2)\n\nusers.find({ $not: { age: { $type: 'number' } } })\n// ... r WHERE NOT(typeUDF(r.age, \"number\"))\n```\n\n#Operations\nWhen using one of the update operations(**e.g:** `.update()`, `.findAndModify()`, etc...), you could use the build-in `prototype` functions(based on the type) prefixing with `$` sign.  \n**Usage:** `users.update({ ... }, { keyName: { $method: value } })`  \n**Note:** value could be single or array of arguments.\n```js\n// Find all, and push 2 to `arr` field\nusers.update({}, { arr: { $push: 2 } });\n\n// Suffix all users `name` with #\nusers.update({}, { name: { $concat: '#' } });\n\n// Trim the name from `foo` to `o`\nusers.update({  name: 'foo' }, { name: { $substr: [1,1] } });\n```\n\n#Schema\nManage your documents with schema.  \n**fields:**\n* `type`\n  *  ***required*** \n  *  used for type comparing, (e.g: `String`, `Boolean`, `Number`, etc..).\n* `default` \n  * ***optional***\n  * value fallback\n* `regex`\n  * ***optional***\n  * regex validation, (e.g: email validation - `/^[a-zA-Z0-9@:%_\\+.~#?&//=|/d]{10,}$/`).\n* `error`\n  * ***optional***\n  * return message to fields that fail in the validation phase(`regex`/`type`). see: [example](https://github.com/a8m/doqmentdb/tree/master/example/odm)\n* `expose`\n  * ***optional***\n  * `expose` by default is `true`, unless you set it to `false`, it's means that all the `find` operations returns the documents without exposing this fields. see: [example](https://github.com/a8m/doqmentdb/blob/master/example/users/model/users/schema.js#L42)\n\n**Example using schema:**  \nschema: `model.js`\n```js\nmodule.exports = {\n  /**\n   * @field name\n   * @default no default value\n   */\n  name: {\n    type: String,\n    'default': ''\n  },\n\n  /**\n   * @field email\n   * @default no default value\n   * @regex email, min-length = 10\n   */\n  email: {\n    type: String,\n    'default': '',\n    regex: /^[a-zA-Z0-9@:%_\\+.~#?&//=|/d]{10,}$/,\n    error: '`email` must be type string, valid email address, and least 10 chars',\n    expose: true\n  },\n\n  /**\n   * @field password\n   * @default no default value\n   * @regex password\n   */\n  password: {\n    type: String,\n    'default': '',\n    regex: /^.*(?=.{8,})(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!#$%&? \"]).*$/,\n    error: '`password` must be type string, contain 8 chars and at least one number, ' +\n      'one letter and one unique character such as !#$%&? \"',\n    expose: false\n  },\n\n  /**\n   * @field isAdmin\n   * @default false\n   */\n  isAdmin: {\n    type: Boolean,\n    'default': false\n  }\n};\n```\nusing schema(`model.js`)\n```js\nvar DoQmentDB  = require('doqmentdb');          \nvar model      = require('./model');            // Get model/schema\nvar connection = new (require('documentdb')     // Create DocumentDB connection\n.DocumentClient)(CONFIG.HOST, CONFIG.OPTIONS);\n\nvar db = new DoQmentDB(connection, CONFIG.DB);  // Create DBManager 'test'\nvar users = db.use('users');                    // Create CollectionManager 'users'\nusers.schema(model);                            // Using schema\n\nusers.create({ password: 'Ar2!as_s'})\n  .then(console.log)\n  .catch(console.log);\n  /*\n   [Error:\n   `email` must be type string, valid email address, and least 10 chars\n   ]\n   */\n\nusers.create({ name: 'Ariel', email: 'ariel.com', password: 'Ar2!as_s'})\n  .then(console.log)\n  .catch(console.log);\n/*\n [Error:\n `email` must be type string, valid email address, and least 10 chars\n ]\n */\n\nusers.create({ name: 'Ariel', email: 'a8m@gm.com', password: 'Ar2!as_s'})\n  .then(console.log)\n  .catch(console.log);\n/*\n {\n   name: 'Ariel',\n   email: 'a8m@gm.com',\n   password: 'Ar2!as_s',\n   id: '2eb7...c0',\n    ...\n }\n */\nusers.find({})\n  .then(console.log);\n/*\n Get all documents but without exposing fields(i.e: omit `password` field)\n */\n```\nsee: [How to architect your models](https://github.com/a8m/doqmentdb/tree/master/example/users/model)\n\n#Middleware\nMiddleware/Hooks are executed at the document level(`create`/`save`/`insert`, `update`, `remove/delete`).  \nThere are two types of middleware, **pre** and **post**.  \n\n##pre\n**Usage:** `users.pre(operation, callback)`  \n**Note:** `pre` middleware are executed one after another, when each middleware calls next.  \n**Example:** \n```js\nusers.pre('save', function(next) {\n  var doc = this;\n  doc.createdAt = new Date().toString();\n  next();\n}, function(next) {\n  var doc = this;\n  doc.updatedAt = new Date().toString();\n  next();\n});\n\n// Do something async\nusers.pre('save', function(next) {\n  var doc = this;\n  bcrypt.genSalt(10, function(err, salt) {\n    bcrypt.hash(doc.password, salt, function(err, hash) {\n      doc.password = hash;\n      next();\n    });\n  });\n});\n// ##Note: the order is importatnt, this example order:\n// `createdAt()`, `updatedAT()`, `hash/bcrypt()`, and then the `.create` operation will called\n```\n##post\n**Usage:** `users.post(operation, callback)`  \n**Note:** `post` middleware are executed in parallel.  \n**Example:** \n```js\nusers.post('save', function(doc) {\n  logger(new Date(), doc, 'saved!')\n});\n```\n\n[npm-image]: https://img.shields.io/npm/v/doqmentdb.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/doqmentdb\n[travis-image]: https://img.shields.io/travis/a8m/doqmentdb.svg?style=flat-square\n[travis-url]: https://travis-ci.org/a8m/doqmentdb\n[coveralls-image]: https://img.shields.io/coveralls/a8m/doqmentdb.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/a8m/doqmentdb\n[david-image]: http://img.shields.io/david/a8m/doqmentdb.svg?style=flat-square\n[david-url]: https://david-dm.org/a8m/doqmentdb\n[license-image]: http://img.shields.io/npm/l/doqmentdb.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/doqmentdb.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/doqmentdb\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/a8m/doqmentdb/issues"
  },
  "_id": "doqmentdb@0.2.4",
  "_shasum": "6cb8ba3d24f17618aa08f581911323c5b50a58ab",
  "_from": "doqmentdb@",
  "_resolved": "https://registry.npmjs.org/doqmentdb/-/doqmentdb-0.2.4.tgz"
}
